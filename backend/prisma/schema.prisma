generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Empresa {
  id            Int         @id @default(autoincrement())
  nombre        String
  cuit          String?
  configuracion Json?
  remesas       Remesa[]
  deudores      Deudor[]
  parametros    Parametro[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Remesa {
  id               Int      @id @default(autoincrement())
  numeroRemesa     String   @unique
  empresa          Empresa  @relation(fields: [empresaId], references: [id])
  empresaId        Int
  nombre           String
  archivo          String?
  estadoCarga      String?
  cantidadDeudores Int?
  deudores         Deudor[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Deudor {
  id                Int           @id @default(autoincrement())
  empresa           Empresa       @relation(fields: [empresaId], references: [id])
  empresaId         Int
  remesa            Remesa        @relation(fields: [remesaId], references: [id])
  remesaId          Int
  documento         String
  nombre            String
  apellido          String
  montoTotal        Float?
  fechaVencimiento  DateTime?
  estadoSituacion   Parametro?    @relation("EstadoSituacion", fields: [estadoSituacionId], references: [id])
  estadoSituacionId Int?
  estadoGestion     Parametro?    @relation("EstadoGestion", fields: [estadoGestionId], references: [id])
  estadoGestionId   Int?
  camposAdicionales Json?
  comentarios       Comentario[]
  facturas          Factura[]
  pagos             Pago[]
  contactos         Contacto[]
  campoExtras       CampoExtra[]
  transacciones     Transaccion[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Comentario {
  id        Int      @id @default(autoincrement())
  deudor    Deudor   @relation(fields: [deudorId], references: [id])
  deudorId  Int
  usuario   Usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId Int?
  fecha     DateTime @default(now())
  texto     String
  origen    String?
}

model Factura {
  id           Int      @id @default(autoincrement())
  deudor       Deudor   @relation(fields: [deudorId], references: [id])
  deudorId     Int
  nroFactura   String
  importe      Float
  fechaEmision DateTime
  vencimiento  DateTime
}

model Pago {
  id            Int      @id @default(autoincrement())
  deudor        Deudor   @relation(fields: [deudorId], references: [id])
  deudorId      Int
  fecha         DateTime
  importe       Float
  origenArchivo String?
  observacion   String?
}

model Contacto {
  id        Int     @id @default(autoincrement())
  deudor    Deudor  @relation(fields: [deudorId], references: [id])
  deudorId  Int
  tipo      String
  valor     String
  subtipo   String?   // MOBILE | FIXED_LINE (opcional)
  prioridad Int?
  validado  Boolean @default(false)

  @@index([deudorId, tipo])
  @@unique([deudorId, tipo, valor]) // evita duplicados exactos
}

model CampoExtra {
  id       Int    @id @default(autoincrement())
  deudor   Deudor @relation(fields: [deudorId], references: [id])
  deudorId Int
  clave    String
  valor    String
}

model Parametro {
  id          Int      @id @default(autoincrement())
  empresa     Empresa? @relation(fields: [empresaId], references: [id])
  empresaId   Int?
  grupo       String
  clave       String   @unique
  descripcion String

  // Relación inversa a Deudor
  deudoresSituacion Deudor[] @relation("EstadoSituacion")
  deudoresGestion   Deudor[] @relation("EstadoGestion")
}

model Usuario {
  id            Int           @id @default(autoincrement())
  googleId      String        @unique
  nombre        String
  email         String        @unique
  avatarUrl     String?
  rol           String        @default("usuario") // o admin, gestor, etc.
  comentarios   Comentario[]
  transacciones Transaccion[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// prisma/schema.prisma

model Transaccion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Quién realizó la acción
  usuarioId Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id])

  // Contexto de cobranzas (opcional si aplica)
  deudorId Int?
  deudor   Deudor? @relation(fields: [deudorId], references: [id])

  // Contexto genérico de negocio (sirve para TODO)
  // Ej.: entidad = "Contacto" | "Comentario" | "Pago" | "Mail" | "Whatsapp" | "Convenio" | "Factura" | "Deudor" | ...
  entidad   String
  entidadId String? // Acepta cualquier tipo de ID como string (número, UUID, etc.)

  // Qué pasó
  tipo    String // Ej.: "CREATE" | "UPDATE" | "DELETE" | "SEND" | "STATUS_CHANGE" | "LOGIN" | ...
  resumen String? // Humano-legible: "Agregó teléfono +54 911..."
  data    Json? // Payload estructurado: { before, after } | request | response | etc.

  // Metadata técnica
  ip        String?
  userAgent String?

  @@index([deudorId, createdAt])
  @@index([usuarioId, createdAt])
  @@index([entidad, entidadId])
  @@index([tipo, createdAt])
}
