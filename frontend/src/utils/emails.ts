import * as validator from 'validator';

export type EmailPreview = {
    valido: boolean;
    normalizado?: string;
    motivoInvalido?: string;
};

/**
 * üßπ Limpia y normaliza el email (min√∫sculas, sin espacios)
 */
export function normalizarEmail(input: string): string {
    return input.trim().toLowerCase();
}

/**
 * ‚úÖ Valida sint√°cticamente un correo electr√≥nico seg√∫n RFC
 * (No hace validaci√≥n MX, eso queda para el backend)
 */
export function validarEmailFront(email: string): EmailPreview {
    if (!email) {
        return { valido: false, motivoInvalido: 'Vac√≠o' };
    }

    const normalizado = normalizarEmail(email);
    const valido = validator.isEmail(normalizado);

    return valido
        ? { valido, normalizado }
        : { valido, normalizado, motivoInvalido: 'Formato inv√°lido' };
}

/**
 * üß† Helper para mostrar mensajes visuales de ayuda (en inputs)
 */
export function getHelperTextEmail(preview: EmailPreview | null): string | undefined {
    if (!preview) return undefined;
    if (preview.valido) return `Se guardar√° como: ${preview.normalizado}`;
    return preview.motivoInvalido ? `Correo inv√°lido: ${preview.motivoInvalido}` : 'Correo inv√°lido';
}